<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
            xmlns="http://java.sun.com/xml/ns/javaee" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                                http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
            >

    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <!-- Нужно ли экранировать спецсиволы HTML и JavaScript -->
    <context-param>
        <param-name>defaultHtmlEscape</param-name>
        <param-value>true</param-value>
    </context-param>
    
    <!-- Объявляем параметр для ссылки на корень веб-приложения.
         Можно использовать в конфигурационных файлах следующим образом:
             log4j.appender.testfile.File=${webapp.root}/WEB-INF/testlog.log
     -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>webapp.root</param-value>
    </context-param>
     
    <!-- Указываем местоположение корневых файлов конфигурации WebApplicationContext 
         для Spring, разделяемого всеми сервлетами и фильтрами -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:META-INF/spring/applicationContext.xml 
            classpath*:META-INF/spring/applicationContext-infrastructure.xml
            /WEB-INF/spring/applicationContext-security.xml
        </param-value>
    </context-param>
    
    <!-- /// Фильтры Spring MVC //////////////////////////////////////////// -->

    <!-- Позволяет указать кодировку для запроса. Это полезно, поскольку современные браузеры, 
         как правило, не устанавливают кодировка символов, даже если таковая указана на HTML-странице или форме.

         Этот фильтр может либо применить кодировку по умолчанию, если в запросе не указана кодировка, 
         либо обеспечить кодирование запроса в нужную кодировку вне зависимости от того, 
         установлена она в запросе или нет ("forceEncoding"="true").
     -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <!-- Этот фильтр предоставляет поддержку для HTTP-методов, отличных от 
         GET и POST (например, PUT и DELETE).
     
         Данный фильтр должен запускаться после обработки запросов на загрузку
         файлов с множественным содержимым (multipart requests).
     -->
    <filter>
        <filter-name>httpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    
    <!-- Связывает дистпетчер сущностей JPA (EntityManager) с потоком для полной
         обработки запроса. В частности, позволяет функционировать таким средствам JPA,
         как ленивая выборка.
     -->
    <filter>
        <filter-name>springOpenEntityManagerInViewFilter</filter-name>
        <filter-class>
            org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
        </filter-class>
    </filter>
    
    <!-- Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>
            org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
    </filter>
    
    <!-- /// Привязка фильтров к URL /////////////////////////////////////// -->

    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>httpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter-mapping>
        <filter-name>springOpenEntityManagerInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
        
    <!-- Слушатель класса ContextLoaderListener. Он позволяет Spring загрузить 
         и завершить корневой WebApplicationContext. Определение данного
         слушателя должно быть размещено после определения Log4jConfigListener -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- /// Обработка запросов приложения ///////////////////////////////// -->
    
    <!-- Сервлет диспетчера. Анализирует запросы и направляет их
         соответствующему контроллеру для обработки -->
    <servlet>
        <servlet-name>applicationServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/spring/applicationServlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        <multipart-config>
            <!-- Максимальный размер загружаемого файла 50 Mb -->
            <max-file-size>50000000</max-file-size>
        </multipart-config>
    </servlet>
    
    <!-- Сервлет для загрузки статических ресурсов из jar-файлов -->
    <servlet>
        <servlet-name>resourceServlet</servlet-name>
        <servlet-class>org.springframework.js.resource.ResourceServlet</servlet-class>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>applicationServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    <servlet-mapping>
        <servlet-name>resourceServlet</servlet-name>
        <url-pattern>/resources/*</url-pattern>
    </servlet-mapping> 
    
</web-app>
